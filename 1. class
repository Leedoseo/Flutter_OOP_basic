// 1. class 키워드를 입력 후 클래스 명을 지정해 클래스를 선언.
class Idol {
  // 클래스에 종속되는 변수를 지정
  String name = "블랙핑크";
  
  // 클래스에 종속되는 함수를 지정
  // 클래스에 종속되는 함수는 메서드라고 부름
  void sayName() {
    
    // 클래스 내부의 속성을 지칭하고 싶을 때는 this 키워드를 사용하면됨
    // 결과적으로 this.name은 Idol 클래스의 name 변수를 지칭하는 것임.
    print("저는 ${this.name}입니다.");
    
    // 스코프 안에 같은 속성의 이름이 하나만 존재한다면 this를 생략할 수도 있음.
    print("저는 $name입니다.");
  }
}

void main() {
  /* 변수 타입을 Idol로 지정하고 Idol의 인스턴스를 생성할 수 있음.
     인스턴스를 생성할 때는 함수를 실행하는 것처럼 인스턴스화 하고 싶은 클래스에 괄호를 열고 닫아주면 됨!*/
  Idol blackPink = Idol(); // Idol 인스턴스 생성
  
  // 메서드 실행
  blackPink.sayName();
}

// 2.생성자를 사용해서 활용도 높이기
class Idol {
  // 생성자에서 입력받는 변수들은 일반적으로 final 키워드 사용
  final String name;
  
  // 생성자 선언
  // 클래스와 같은 이름이어야함
  // 함수의 매개변수를 선언하는 것처럼 매개변수를 지정
  Idol(String name) : this.name = name;
  
  void sayName() {
    print("저는 ${this.name}입니다.");
  }
}

void main() {
  // name에 "블랙핑크" 저장
  Idol blackPink = Idol("블랙핑크");
  blackPink.sayName();
  
  // name에 "BTS" 저장
  Idol bts = Idol("BTS");
  bts.sayName();
}

3. 네임드 생성자
class Idol {
  final String name;
  final int membersCount;
  
  // 생성자
  Idol(String name, int membersCount)
    // 1개 이상의 변수를 저장하고 싶을 떄는 ,기호로 연결해주면 됨
    : this.name = name,
      this.membersCount = membersCount;
  
  // 네임드 생성자
  // {클래스명, 네임드 생성자명} 형식
  // 나머지 과정은 기본 생성자와 동일
  Idol.fromMap(Map<String, dynamic> map)
    : this.name = map["name"],
      this.membersCount = map["membersCount"];
  
  void sayName() {
    print("저는 ${this.name}입니다. ${this.name} 멤버는 ${this.membersCount}명입니다.");
  }
}

void main() {
  // 기본 생성자 사용
  Idol blackPink = Idol("블랙핑크", 4);
  blackPink.sayName();
  
  // fromMap이라는 네임드 생성자 사용
  Idol bts = Idol.fromMap({
    "name": "BTS",
    "membersCount": 7,
  });
  bts.sayName();
}

// 4. private var
class Idol {
  // '_'로 변수명을 시작하면 private 변수를 선언할 수 있음.
  String _name;
  
  Idol(this._name);
}

void main() {
  Idol blackPink = Idol("블랙핑크");
  
  // 같은 파일에서는 _name 변수에 접근할 수 있지만, 다른 파일에서는 불가능.
  print(blackPink._name);
}

// 5. 게터와 세터
class Idol {
  String _name = "블랙핑크";
  
  // get키워드를 사용해서 게터임을 명시, 메서드와 다르게 파라미터를 받지 않음.
  String get name {
    return this._name;
  }
  
  // 세터는 set이라는 키워드를 사용해서 선언, 파라미터로 하나의 변수를 받을 수 있음
  set name(String name) {
    this._name = name;
  }
}

void main() {
    Idol blackPink = Idol();
    
    blackPink.name = "에이핑크";
    print(blackPink.name);
}
