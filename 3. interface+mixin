// 인터페이스

// 부모 클래스
class Idol {
  final String name;
  final int membersCount;
  
  Idol(this.name, this.membersCount);
  
  void sayName() {
    print("저는 ${this.name}입니다.");
  }
  
  void sayMembersCount() {
    print("${this.name}멤버는 ${this.membersCount}명입니다.");
  }
}

// implements 키워드를 사용하면 원하는 클래스를 인터페이스로 사용 가능!
class GirlGroup implements Idol {
  final String name;
  final int membersCount;
  
  GirlGroup(
  this.name,
  this.membersCount,
  );
  
  void sayName() {
    print("저는 여자 아이돌 ${this.membersCount}명입니다.");
  }
  
  void sayMembersCount() {
    print("${this.name} 멤버는 ${this.membersCount}명 입니다.");
  }
}

// 인터페이스 사용법
void main() {
  GirlGroup blackPink = GirlGroup("블랙핑크", 4);
  
  blackPink.sayName();
  blackPink.sayMembersCount();
}

// 믹스인

// 부모 클래스
class Idol {
  final String name;
  final int membersCount;
  
  Idol(this.name, this.membersCount);
  
  void sayName() {
    print("저는 ${this.name}입니다.");
  }
  
  void sayMembersCount() {
    print("${this.name}멤버는 ${this.membersCount}명입니다.");
  }
}

mixin IdolSingMixin on Idol {  // mixin키워드로 정의된 믹스인 정의, on Idol은 이 믹스인을 Idol을 상속한 클래스에만 쓸 수 있다는 뜻 (제한 조건을 건 것!)
  void sing() { // sing()은 this.name을 사용 -> 즉, Idol클래스의 속성을 참조함
    print("${this.name}이(가) 노래를 부릅니다.");
  }
}

// 믹스인을 적용할 때는 with 키워드 사용
class BoyGroup extends Idol with IdolSingMixin { // extends Idol -> 부모 클래스로부터 기본 속성과 메서드 상속, with IdolSingMixin -> sing() 메서드도 추가로 섞어 넣음
  BoyGroup( 									 // 즉, BoyGroup은 Idol + IdolSingMixin의 기능을 모두 가짐!
  super.name,									 // sayName, sayMembersCount, sing, sayMale 다 가능!!
  super.membersCount,
  );
  
  void sayMale() {
    print("저는 남자 아이돌입니다.");
  }
}

void main() {
  BoyGroup bts = BoyGroup("BTS", 7);
  
  bts.sayMale(); // BoyGroup의 고유 기능
  bts.sing();    // mixin에서 온 기능!
}
